// Practice OO
// Object oriented programming can be a hard technique to demonstrate, especially to people used to writing smallish
// programs (say Python scripts). In my experience, code that achieves enough complexity to make OO really worthwhile
// is easily 150 to 200 lines (recent examples being a hotkey training program and a C# line counter with nasty
// persistent bugs till I rewrote critical sections with OO). Possibly OO could be done in shorter code and that I
// simply have not had the originality yet to think of a proper assignment. However, below example should be reasonably
// simple to try to get a taste of the power of Object Orientation!

Miniature Offline Role Playing Game

Make a game with a player.
The player is has 50 hitpoints

There is an orc, which has 20 hitpoints

1. Implement the player and the orc. Hint: you could make a class "Character", and create one of each in the main
program

2. We want them to be able to fight: we equip both of them with a weapon. Give the player a sword which does 1d6
(1/2/3/4/5/6) points of damage each round, and the orc an axe which does 1d3 damage each round (1/2/3). Hint: you could
make a 'weapon' class. Whether you subclass it to Axe and Sword subclasses is up to you. Make a method "hit" in the
Player/Character/class that takes a target as argument. Like: player.hits(orc), the target taking damage dependent
on the other's weapon. You could also add a 'getWounded' method.

3. Of course, we also want to SEE (ehm... read) some action: add code to display when someone does damage or gets
wounded (like 'Player swings his sword and does 6 damage to orc' / 'orc gets hit by Player and drops to 14 hitpoints'
Now let the player hit the orc. Then let the orc hit the player.

4. Of course, as things stand, player and orc can keep bashing each other into infinity. Make it so that when any
character takes damage that reduces them to (or below) 0 hit points, a message is shows that the character dies.
Any loop can end by checking the "isAlive()" property. Also note that a dead character cannot hit back.

// you should now have at least two classes and about 50 lines of code.
